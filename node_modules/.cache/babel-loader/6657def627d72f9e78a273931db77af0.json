{"ast":null,"code":"var _jsxFileName = \"/Users/raghavasrivastava/Downloads/Health-and-Fitness-Website/src/components/nested-components/RecipesList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport RecipeFullView from './RecipeFullView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RecipesList = _ref => {\n  _s();\n\n  let {\n    recipes,\n    recipesScroll,\n    title\n  } = _ref;\n  const [recipeIndex, setRecipeIndex] = useState('');\n  const [clickedRecipe, setCLickedRecipe] = useState('');\n  const [showClickedRecipe, setShowClickedRecipe] = useState(false); // recipe index is returned form the clicked recipe\n  // recipe is fetched from recipes array using returned index\n  // recipe opens in full view and the returned recipeIndex resets\n\n  useEffect(() => {\n    if (recipeIndex !== '') {\n      const recipe = recipes.find((recipe, i) => i === recipeIndex);\n      setCLickedRecipe(recipe);\n      setShowClickedRecipe(true);\n      setRecipeIndex('');\n    }\n  }, [recipeIndex, recipes]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"recipes-title\",\n      ref: recipesScroll,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"recipes-container\",\n      children: recipes.map((recipe, i) => {\n        return /*#__PURE__*/_jsxDEV(Recipe, {\n          index: i,\n          image: recipe.image,\n          title: recipe.name,\n          setRecipeIndex: setRecipeIndex\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), // renders RecipeFullView when setShowClickedRecipe() is set to True\n    showClickedRecipe && /*#__PURE__*/_jsxDEV(RecipeFullView, {\n      recipe: clickedRecipe,\n      setShowClickedRecipe: setShowClickedRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true);\n}; // When a recipe is clicked the index of clicked recipe is passed to the parent element using setRecipeIndex\n// then the function inside the useEffect in RecipesList runs when recipe index is updated upon click\n\n\n_s(RecipesList, \"ay+JELYRMSzXZx35MpFXR9nMHcw=\");\n\n_c = RecipesList;\n\nconst Recipe = _ref2 => {\n  let {\n    title,\n    image,\n    index,\n    setRecipeIndex\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recipe\",\n    onClick: () => setRecipeIndex(index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recipe-image\",\n      style: {\n        backgroundImage: `url('${image}')`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recipe-title\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: formatRecipeTitle(title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}; // Formatting recipe title if title length is more than 18 (11 in mobile screen) characters replace additional characters with \"..\"\n// to avoid messing up the recipe container design\n\n\n_c2 = Recipe;\n\nconst formatRecipeTitle = title => {\n  const screenWidth = document.body.offsetWidth;\n  const titleLength = title.length;\n\n  if (screenWidth > 1024 && titleLength <= 18 || screenWidth <= 769 && titleLength <= 11) {\n    return title;\n  }\n\n  return screenWidth > 769 ? title.substring(0, 17) + \"..\" : title.substring(0, 10) + \"..\";\n};\n\nexport default RecipesList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RecipesList\");\n$RefreshReg$(_c2, \"Recipe\");","map":{"version":3,"sources":["/Users/raghavasrivastava/Downloads/Health-and-Fitness-Website/src/components/nested-components/RecipesList.js"],"names":["useState","useEffect","RecipeFullView","RecipesList","recipes","recipesScroll","title","recipeIndex","setRecipeIndex","clickedRecipe","setCLickedRecipe","showClickedRecipe","setShowClickedRecipe","recipe","find","i","map","image","name","Recipe","index","backgroundImage","formatRecipeTitle","screenWidth","document","body","offsetWidth","titleLength","length","substring"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport RecipeFullView from './RecipeFullView';\r\n\r\nconst RecipesList = ({ recipes, recipesScroll, title}) => {\r\n    const [recipeIndex, setRecipeIndex] = useState('');\r\n    const [clickedRecipe, setCLickedRecipe] = useState('');\r\n    const [showClickedRecipe, setShowClickedRecipe] = useState(false);\r\n\r\n    // recipe index is returned form the clicked recipe\r\n    // recipe is fetched from recipes array using returned index\r\n    // recipe opens in full view and the returned recipeIndex resets\r\n    useEffect(() => {\r\n        if (recipeIndex !== '') {\r\n            const recipe = recipes.find((recipe, i) => i === recipeIndex)\r\n            setCLickedRecipe(recipe);\r\n            setShowClickedRecipe(true);\r\n            setRecipeIndex('')\r\n        }\r\n    }, [recipeIndex, recipes]);\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"recipes-title\" ref={recipesScroll}>{title}</h2>\r\n            <section className=\"recipes-container\">\r\n                {\r\n                    recipes.map((recipe, i) => {\r\n                        return(\r\n                            <Recipe \r\n                                key={i}\r\n                                index={i}\r\n                                image={recipe.image} \r\n                                title={recipe.name}\r\n                                setRecipeIndex={setRecipeIndex}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </section>\r\n            {   \r\n                // renders RecipeFullView when setShowClickedRecipe() is set to True\r\n                showClickedRecipe && <RecipeFullView\r\n                    recipe={clickedRecipe}\r\n                    setShowClickedRecipe={setShowClickedRecipe}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n// When a recipe is clicked the index of clicked recipe is passed to the parent element using setRecipeIndex\r\n// then the function inside the useEffect in RecipesList runs when recipe index is updated upon click\r\nconst Recipe = ({ title, image, index, setRecipeIndex}) => {\r\n    return(\r\n        <div className=\"recipe\" onClick={() => setRecipeIndex(index)}>\r\n            <div className=\"recipe-image\" style={{ backgroundImage: `url('${image}')` }}>\r\n                <div className=\"overlay\"></div>\r\n            </div>\r\n\r\n            <div className=\"recipe-title\">\r\n                <p>{formatRecipeTitle(title)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Formatting recipe title if title length is more than 18 (11 in mobile screen) characters replace additional characters with \"..\"\r\n// to avoid messing up the recipe container design\r\nconst formatRecipeTitle = (title) => {\r\n    const screenWidth = document.body.offsetWidth;\r\n    const titleLength = title.length;\r\n\r\n    if ((screenWidth > 1024 && titleLength <= 18) ||\r\n        (screenWidth <= 769 && titleLength <= 11))\r\n    {\r\n       return title;\r\n    }\r\n\r\n    return screenWidth > 769 ? \r\n            title.substring(0, 17) + \"..\" :\r\n            title.substring(0, 10) + \"..\";\r\n}\r\n\r\nexport default RecipesList;"]},"metadata":{},"sourceType":"module"}