{"ast":null,"code":"var _jsxFileName = \"/Users/raghavasrivastava/Downloads/Health-and-Fitness-Website/src/components/Recipes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport HealthyFoods from './nested-components/HealthyFoods';\nimport SearchContainer from './nested-components/SearchContainer';\nimport RecipesList from './nested-components/RecipesList';\nimport NotificationTab from './nested-components/NotificationTab';\nimport { RecipesContext } from '../context/Recipes';\nimport { useLocation } from 'react-router-dom';\nimport '../styles/desktop/SearchContainer.scss';\nimport '../styles/tablet/SearchContainer.scss';\nimport '../styles/mobile/SearchContainer.scss';\nimport '../styles/desktop/HealthyFoods.scss';\nimport '../styles/tablet/HealthyFoods.scss';\nimport '../styles/mobile/HealthyFoods.scss';\nimport '../styles/desktop/RecipesList.scss';\nimport '../styles/tablet/RecipesList.scss';\nimport '../styles/mobile/RecipesList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Recipes = () => {\n  _s();\n\n  const [showNotificationTab, setShowNotificationTab] = useState(false);\n  const [hideLoader, setHideLoader] = useState(false);\n  const {\n    recipes,\n    setRecipes\n  } = useContext(RecipesContext);\n  const location = useLocation();\n  const recipesScroll = useRef();\n  const healthyFoodsScroll = useRef(); // Passed down to SearchContainer and HealthyFoods to request recipes upon recipe search or click on a food type\n\n  const searchForRecipes = async query => {\n    if (query === \"\") return; // resetting hide loader\n\n    setHideLoader(false);\n    const requestURL = getRecipesSearchRequestRL(query);\n    const searchRecipes = await fetch(requestURL);\n    const returnedRecipes = await searchRecipes.json();\n\n    if (returnedRecipes.to === 0) {\n      setShowNotificationTab(true);\n    } else {\n      const recipes = getRequiredRecipesData(returnedRecipes.hits);\n      setRecipes(recipes);\n    } // used in SearchContainer and HealthyFoods components to hide loader when recipes are found\n\n\n    setHideLoader(true);\n  }; // Scrolling to recipes when new recipes are displayed\n\n\n  useEffect(() => {\n    if (recipes.length > 0) {\n      recipesScroll.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [recipes]);\n  useEffect(() => {\n    if (location.pathname === \"/Recipes\") window.scrollTo(0, 0);\n\n    if (location.search === \"?to=Healthy-foods\") {\n      healthyFoodsScroll.current.scrollIntoView();\n    }\n  }, [location.pathname, location.search]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"recipes\",\n    children: [/*#__PURE__*/_jsxDEV(SearchContainer, {\n      searchForRecipes: searchForRecipes,\n      hideLoader: hideLoader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HealthyFoods, {\n      searchForRecipes: searchForRecipes,\n      hideLoader: hideLoader,\n      healthyFoodsScroll: healthyFoodsScroll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), recipes.length > 0 ? /*#__PURE__*/_jsxDEV(RecipesList, {\n      recipes: recipes,\n      recipesScroll: recipesScroll,\n      title: \"Recipes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 35\n    }, this) : null, showNotificationTab ? /*#__PURE__*/_jsxDEV(NotificationTab, {\n      text: \"No recipes found for your search\",\n      setShowNotificationTab: setShowNotificationTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 36\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}; // Returns URL used to fetch recipes from edamam recipe search api\n// using the required environment variables id and key which are stored in .env file\n\n\n_s(Recipes, \"fSSjmCeJJIVHSjINf38H5sEnlNc=\", false, function () {\n  return [useLocation];\n});\n\n_c = Recipes;\n\nconst getRecipesSearchRequestRL = query => {\n  const id = process.env.REACT_APP_EDAMAM_APP_ID;\n  const key = process.env.REACT_APP_EDAMAM_APP_KEY;\n  return `https://api.edamam.com/api/recipes/v2?type=public&q=${query}s&app_id=${id}&app_key=${key}`;\n};\n\nconst getRequiredRecipesData = recipes => {\n  return recipes.map(recipe => {\n    let largeImage = recipe.recipe.images.LARGE !== undefined ? recipe.recipe.images.LARGE.url : recipe.recipe.images.REGULAR.url;\n    return {\n      name: recipe.recipe.label,\n      prepTime: recipe.recipe.totalTime,\n      ingredients: recipe.recipe.ingredientLines,\n      calories: recipe.recipe.calories,\n      image: recipe.recipe.images.SMALL.url,\n      largeImage: largeImage\n    };\n  });\n};\n\nexport default Recipes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recipes\");","map":{"version":3,"sources":["/Users/raghavasrivastava/Downloads/Health-and-Fitness-Website/src/components/Recipes.js"],"names":["React","useState","useContext","useEffect","useRef","HealthyFoods","SearchContainer","RecipesList","NotificationTab","RecipesContext","useLocation","Recipes","showNotificationTab","setShowNotificationTab","hideLoader","setHideLoader","recipes","setRecipes","location","recipesScroll","healthyFoodsScroll","searchForRecipes","query","requestURL","getRecipesSearchRequestRL","searchRecipes","fetch","returnedRecipes","json","to","getRequiredRecipesData","hits","length","current","scrollIntoView","behavior","pathname","window","scrollTo","search","id","process","env","REACT_APP_EDAMAM_APP_ID","key","REACT_APP_EDAMAM_APP_KEY","map","recipe","largeImage","images","LARGE","undefined","url","REGULAR","name","label","prepTime","totalTime","ingredients","ingredientLines","calories","image","SMALL"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport HealthyFoods from './nested-components/HealthyFoods';\r\nimport SearchContainer from './nested-components/SearchContainer';\r\nimport RecipesList from './nested-components/RecipesList';\r\nimport NotificationTab from './nested-components/NotificationTab';\r\nimport { RecipesContext } from '../context/Recipes';\r\nimport {useLocation} from 'react-router-dom'\r\n\r\nimport '../styles/desktop/SearchContainer.scss';\r\nimport '../styles/tablet/SearchContainer.scss';\r\nimport '../styles/mobile/SearchContainer.scss';\r\n\r\nimport '../styles/desktop/HealthyFoods.scss';\r\nimport '../styles/tablet/HealthyFoods.scss';\r\nimport '../styles/mobile/HealthyFoods.scss';\r\n\r\nimport '../styles/desktop/RecipesList.scss';\r\nimport '../styles/tablet/RecipesList.scss';\r\nimport '../styles/mobile/RecipesList.scss';\r\n\r\nconst Recipes = () => {\r\n    const [showNotificationTab, setShowNotificationTab] = useState(false);\r\n    const [hideLoader, setHideLoader] = useState(false); \r\n\r\n    const { recipes, setRecipes } = useContext(RecipesContext);\r\n\r\n    const location = useLocation();\r\n\r\n    const recipesScroll = useRef(); \r\n\r\n    const healthyFoodsScroll = useRef();\r\n\r\n    // Passed down to SearchContainer and HealthyFoods to request recipes upon recipe search or click on a food type\r\n    const searchForRecipes = async (query) => {\r\n        if (query === \"\") return;\r\n\r\n        // resetting hide loader\r\n        setHideLoader(false);\r\n\r\n        const requestURL = getRecipesSearchRequestRL(query);\r\n        const searchRecipes = await fetch(requestURL);\r\n        const returnedRecipes = await searchRecipes.json();\r\n\r\n        if (returnedRecipes.to === 0) {\r\n            setShowNotificationTab(true);\r\n        } else {\r\n            const recipes = getRequiredRecipesData(returnedRecipes.hits);\r\n            setRecipes(recipes);\r\n        }\r\n        // used in SearchContainer and HealthyFoods components to hide loader when recipes are found\r\n        setHideLoader(true);\r\n    }\r\n\r\n    // Scrolling to recipes when new recipes are displayed\r\n    useEffect(() => {\r\n        if (recipes.length > 0) {\r\n            recipesScroll.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }, [recipes]);\r\n\r\n    useEffect(() => {\r\n        if (location.pathname === \"/Recipes\") window.scrollTo(0, 0)\r\n        if (location.search === \"?to=Healthy-foods\") {\r\n            healthyFoodsScroll.current.scrollIntoView();\r\n        }\r\n    }, [location.pathname, location.search])\r\n\r\n    return (\r\n        <main className=\"recipes\">\r\n            <SearchContainer searchForRecipes={searchForRecipes} hideLoader={hideLoader}  />\r\n            <HealthyFoods searchForRecipes={searchForRecipes} hideLoader={hideLoader} healthyFoodsScroll={healthyFoodsScroll} />\r\n            {recipes.length > 0 ? <RecipesList recipes={recipes} recipesScroll={recipesScroll} title=\"Recipes\" /> : null}\r\n            {showNotificationTab ? <NotificationTab text=\"No recipes found for your search\" setShowNotificationTab={setShowNotificationTab} /> : null}\r\n        </main>\r\n    )\r\n}\r\n\r\n// Returns URL used to fetch recipes from edamam recipe search api\r\n// using the required environment variables id and key which are stored in .env file\r\nconst getRecipesSearchRequestRL = (query) => {\r\n    const id = process.env.REACT_APP_EDAMAM_APP_ID\r\n    const key = process.env.REACT_APP_EDAMAM_APP_KEY\r\n    return `https://api.edamam.com/api/recipes/v2?type=public&q=${query}s&app_id=${id}&app_key=${key}`\r\n}\r\n\r\nconst getRequiredRecipesData = (recipes) => {\r\n    return recipes.map((recipe) => {\r\n        let largeImage = recipe.recipe.images.LARGE !== undefined ? \r\n            recipe.recipe.images.LARGE.url :\r\n            recipe.recipe.images.REGULAR.url ;\r\n\r\n        return {\r\n            name: recipe.recipe.label,\r\n            prepTime: recipe.recipe.totalTime,\r\n            ingredients: recipe.recipe.ingredientLines,\r\n            calories: recipe.recipe.calories,\r\n            image: recipe.recipe.images.SMALL.url,\r\n            largeImage: largeImage\r\n        }\r\n    });\r\n}\r\n\r\nexport default Recipes"]},"metadata":{},"sourceType":"module"}